#!/usr/bin/ruby

require 'rack'

# validation & provenance
vendor_dir =  File.join(File.dirname(__FILE__), 'test-stack')

validation_dir = File.join(vendor_dir, 'validation')
$:.unshift File.join(validation_dir, 'lib')
require File.join(validation_dir, 'validation')
require File.join(validation_dir, 'provenance')

# description
description_dir = File.join(vendor_dir, 'description')
$:.unshift File.join(description_dir, 'lib')
require File.join(description_dir, 'describe')

# actionplan
actionplan_dir = File.join(vendor_dir, 'actionplan')
$:.unshift File.join(actionplan_dir, 'lib')
require File.join(actionplan_dir, 'app')

# transformation
ENV["PATH"] = "/Applications/ffmpegX.app/Contents/Resources:#{ENV["PATH"]}"
transformation_dir = File.join(vendor_dir, 'transformation')
$:.unshift File.join(transformation_dir, 'lib')
require File.join(transformation_dir, 'transform')

# storage
storage_dir = File.join(vendor_dir, 'simplestorage')
$:.unshift File.join(storage_dir, 'lib')
require File.join(storage_dir, 'app')

# dummy
require 'sinatra/base'
class StatusEcho < Sinatra::Base
  
  get '/code/:code' do |code|
    if code.to_i == 200
      'all good'
    else
      halt code, 'you asked for it'
    end
  end
  
end

SILO_SANDBOX='/tmp/silo_sandbox'
FileUtils::mkdir_p SILO_SANDBOX

test_stack = Rack::Builder.new do
  
   use Rack::CommonLogger
   use Rack::ShowExceptions
   use Rack::Lint
        
   map "/validation" do
     run Validation.new
   end
   
   map "/provenance" do
     run Provenance.new
   end

   map "/description" do
     run Describe.new
   end

   map "/actionplan" do
     run ActionPlanD.new
   end

   map "/transformation" do
     run Transform.new
   end
   
   map "/silo" do
     run SimpleStorage::App.new(SILO_SANDBOX)
   end
   
   map "/statusecho" do
     run StatusEcho.new
   end
   
end

require 'logger'

# log = File.new("sinatra.log", "a")
# STDOUT.reopen(log)
# STDERR.reopen(log)

httpd = Rack::Handler::Thin
httpd.run test_stack, :Port => ARGV.first
