<?xml version="1.0"?>

<schema xmlns="http://purl.oclc.org/dsdl/schematron">

  <title>DAITSS v2 AIP descriptor</title>

  <ns prefix="M" uri="http://www.loc.gov/METS/"/>
  <ns prefix="P" uri="info:lc/xmlns/premis-v2"/>
  <ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>

  <xsl:key name="admids" match="*" use="@ADMID"/>

  <let name="aipuri" value="/M:mets/@OBJID"/>

  <pattern>
    <title>account</title>
    <rule context="/M:mets">
      <assert test="M:metsHdr/M:agent[@ROLE='OTHER' and @OTHERROLE='SUBMITTER' and M:name]">
        submitter agent must exist
      </assert>
    </rule>

  </pattern>

  <pattern>
    <title>package events</title>

    <rule context="/M:mets">
      <assert test="//P:event[P:eventType = 'submit']">a submit event must exist</assert>
      <assert test="//P:event[P:eventType = 'ingest']">an ingest event must exist</assert>
    </rule>

  </pattern>

  <pattern>
    <title>PREMIS identifiers</title>
    

    <rule context="//P:objectIdentifier">
      <assert test="P:objectIdentifierType = 'URI'">PREMIS object types must be URI</assert>
    </rule>

    <rule context="//P:eventIdentifier">
      <assert test="P:eventIdentifierType = 'URI'">PREMIS event types must be URI</assert>
    </rule>

    <rule context="//P:agentIdentifier">
      <assert test="P:agentIdentifierType = 'URI'">PREMIS agent types must be URI</assert>
    </rule>

  </pattern>

  <pattern>
    <title>representations</title>

    <rule context="/M:mets">

      <assert test="//P:object[@xsi:type='representation'][P:objectIdentifier/P:objectIdentifierValue = concat($aipuri, '/representation/original')]">
        original representation must exist
      </assert>

      <assert test="//P:object[@xsi:type='representation'][P:objectIdentifier/P:objectIdentifierValue = concat($aipuri, '/representation/current')]">
        current representation must exist
      </assert>

      <assert test="//P:object[@xsi:type='representation'][P:objectIdentifier/P:objectIdentifierValue = concat($aipuri, '/representation/normalized')]">
        normalized representation must exist
      </assert>

    </rule>

    <rule context="/M:mets">
      <assert test="M:structMap[@ID='original']">original representation structMap must exist</assert>
      <assert test="M:structMap[@ID='current']">current representation structMap must exist</assert>
      <assert test="M:structMap[@ID='normalized']">normalized representation structMap must exist</assert>
    </rule>

  </pattern>


  <pattern>

    <title>files</title>

    <rule context="//M:file">
      <assert test="concat($aipuri, '/', @ID) = //P:object[@xsi:type='file']/P:objectIdentifier/P:objectIdentifierValue">
        <value-of select="@ID"/> must have a PREMIS file object
      </assert>
    </rule>

    <rule context="//P:object[@xsi:type='file']">
      <assert test="substring-after(P:objectIdentifier/P:objectIdentifierValue, concat($aipuri, '/')) = //M:file/@ID">
        <value-of select="P:objectIdentifier/P:objectIdentifierValue"/> must have a METS file 
      </assert>
    </rule>

  </pattern>

  <pattern>
    <title></title>
    <rule></rule>
  </pattern>

</schema>
