#!/usr/bin/env ruby

require "fileutils"
require "workspace"

include Workspace

# start all packages in the workspace
command = ARGV.shift

case command
when "start"

  config_file = File.join File.dirname(__FILE__), '../spec/config/teststack.yml'
  aip = ARGV.shift
  
  aips = if aip == "all"
           in_workspace
         else
           [ File.join ENV['DAITSS_WORKSPACE'], aip ]
         end

  aips.each do |aip|
    pid = fork { exec "ruby -Ilib bin/ingest -aip #{aip} -config #{config_file}" }
    append_state aip, pid
  end
  
when "stop"
  target = ARGV.shift

  kill_predicate = if target == "all"
                     lambda { |aip, pid| true }
                   else
                     lambda { |aip, pid| target == File.basename(aip) }
                   end

  to_kill, to_keep = read_state.partition &kill_predicate

  to_kill.each do |aip, pid|
    
    begin
      Process.kill "INT", pid.to_i
    rescue Errno::ESRCH
      # OK if its done
    ensure
      FileUtils.touch File.join(aip, "STOP")
    end
    
  end

  write_state to_keep
    
when "list"
  option = ARGV.shift
  
  list = case option
    
         when "pending"
           ingesting = read_state.map { |aip, pid| aip }
           in_workspace.reject { |package_in_workspace| ingesting.include? package_in_workspace }
               
         when "ingesting"
           read_state.map { |aip, pid| aip } 
         
         when "stopped"
           tagged_packages "STOP"
         
         when "rejected"
           tagged_packages "REJECT"
               
         when "snafu"
           tagged_packages "SNAFU"
           
         when "all"
           in_workspace
           
         else 
           raise "Unknown list option #{option.inspect}"
           
         end
  
  puts list
else
  puts "#{command} is not a boss command"
  exit 1
end
