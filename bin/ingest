#!/usr/bin/ruby

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'aip'
require 'optiflag'

module IngestOptions extend OptiFlagSet
  
  flag "aip" do
    description "the aip to ingest"
  end
  
  flag "config" do
    description "the configuration file to use"
  end
    
  and_process!
end

url = IngestOptions.flags.aip
config_file = IngestOptions.flags.config

# load the configuration
SERVICE_URLS = YAML.load open(config_file) { |io| io.read }

# configure the database
DataMapper.setup(:default, SERVICE_URLS["database"])

# load the aip
aip = begin
        Aip.new url
      rescue => e
        puts "cannot process #{url}: #{e.message}"
        exit 1
      end

aip.ingest!

# handle it
if aip.rejected?
  puts "#{aip} is rejected"
  exit 2
elsif aip.snafu?
  puts "#{aip} is snafu"
  exit 3
else
  puts "#{aip} is ingested"
end
