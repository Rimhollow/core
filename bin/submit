#!/usr/bin/env ruby

require 'optparse'
require 'uri'
require 'ostruct'
require 'digest/md5'
require 'fileutils'

# a simple submission client
# takes a specified package on a filesystem, zips it up, and "curls" it to the submission at the specified url as the specified
# operations agent.
# displays curl output, which contains the IEID.

# dependencies:
# curl, zip

def get_options(args)
  config = OpenStruct.new("url" => nil, "package" => nil, "package_name" => nil)

  begin
    opts = OptionParser.new do |opt|

      opt.banner << "\nSubmits a SIP DAITSS 2"
      opt.on_tail("--help", "Show this message") { puts opts; exit }

      opt.on("--url URL", String, "URL of service to submit package to, required") { |key| config.url = key }
      opt.on("--path PATH", String, "Path on filesystem containing SIPs to submit, either --path or --package required") { |path| config.path = path }
      opt.on("--package PATH", String, "Path on filesystem to a single sip, either --path or --package required") { |path| config.package = path }
      opt.on("--username USERNAME", String, "Operations agent username, required") { |username| config.username = username }
      opt.on("--password PASSWORD", String, "Operations agent password, required") { |password| config.password = password }
      opt.on("--note NOTE", String, "Submission event note (should be in quotes)") { |note| config.note = note }
      opt.on("--delete-orig", "-d") { |delete| config.delete = delete }
    end

    opts.parse!(args)

    raise StandardError, "URL not specified" unless config.url
    raise StandardError, "Path not specified" unless config.path or config.package
    raise StandardError, "Only --path or --package can be specified, but not both" if config.path and config.package
    raise StandardError, "Username not specified" unless config.username
    raise StandardError, "Password not specified" unless config.password

    url_obj = URI.parse(config.url)

    raise StandardError, "Specified URL #{config.url} does not look like an HTTP URL" unless url_obj.scheme == "http"

    if config.path
      raise StandardError, "Specified path is not a directory" unless File.directory? config.path
    else
      raise StandardError, "Specified path is not a directory" unless File.directory? config.package
    end

  rescue => e # catch the error from opts.parse! and display
    STDERR.puts "Error parsing command line options:\n#{e.message}\n#{opts}"
    exit 1
  end

  return config
end

# zips directory to /tmp/DIRNAME.zip. Returns string with path to zip file

def zip_package path_to_package
  zip_path = File.join("/tmp", File.basename(path_to_package) + ".zip")
  FileUtils.rm_rf zip_path if File.exists? zip_path

  output = `cd #{File.dirname(path_to_package)}; zip -r #{zip_path} #{File.basename(path_to_package)} 2>&1; cd $PWD`

  raise "zip returned non-zero exit status: #{output}" if $?.exitstatus != 0
  raise "Error creating zip file" unless File.exists? zip_path

  return zip_path
end

# calls curl to submit package to service

def submit_to_svc path_to_zip, path
  n = "sip path: #{path}"
  n += ", submission note: #{@config.note}" if @config.note
  output = `curl -X POST -u #{@config.username}:#{@config.password} -F "sip=@#{path_to_zip}" -F "note=#{n}" #{@config.url}/packages -i 2>&1`

  return output
end

# returns an array of filesystem paths containing packages to submit
def find_packages
  list = Dir.glob(@config.path + "/**/*")
  list = list.select { |p| File.directory? p}
  list_u = list.select { |p| File.exists? File.join(p, File.basename(p) + ".xml") }
  list_l = list.select { |p| File.exists? File.join(p, File.basename(p) + ".XML") }

  list_l | list_u
end

# submits package at path
def submit_package path
  zipfile = zip_package path
  curl_output = submit_to_svc zipfile, path
  FileUtils.rm_rf zipfile

  ieid = curl_output[/E[A-Z0-9]{8}_[A-Z0-9]{6}/]

  if ieid
    pkg_page = `curl #{@config.url}/package/#{ieid} 2>&1` 
    if pkg_page =~ /submit/
      puts Time.now.to_s + " -- " + File.basename(path) + " -- submitted successfully: " + ieid
      FileUtils.rm_rf path if @config.delete
    elsif pkg_page =~ /reject/
      puts Time.now.to_s + " -- " + File.basename(path) + " -- rejected: " + ieid
    else
      puts Time.now.to_s + " -- " + File.basename(path) + " -- couldn't determine submission outcome: " + ieid
      puts pkg_page
      puts "==============================================="
    end
  else
    puts Time.now.to_s + " -- " + File.basename(path) + " -- submission error"
    puts curl_output
    puts "==============================================="
  end
end

@config = get_options(ARGV) or exit

if @config.path
  list = find_packages

  STDERR.puts "No packages found in #{@config.path}" unless list.length > 0

  list.each do |pkg_path|
    submit_package pkg_path
  end
elsif @config.package
  submit_package @config.package
else
  exit 1
end

