<?xml version="1.0" encoding="UTF-8"?>
<mets OBJID="<%= uri %>"
      xmlns="http://www.loc.gov/METS/"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.loc.gov/METS/ http://www.loc.gov/standards/mets/mets.xsd
                          info:lc/xmlns/premis-v2 http://www.loc.gov/standards/premis/premis.xsd">

<!-- DMD -->
<% if metadata.has_key? 'dmd' %>
  <%= md_section metadata['dmd'], :type => 'dmdSec', :id => next_id(:dmd, id) %>
<% end %>

<!-- AIP AMD -->
<amdSec>

<!-- TECH -->
<%= md_section intellectual_entity_object, :type => 'techMD', :id => next_id(:tech) %>

<% rep_name_map.map do |name, rep| %>
  <% rep_object = representation_object rep, :uri => "#{uri}/representation/#{name}" %>
  <%= md_section rep_object, :type => 'techMD', :id => next_id(:tech, name) %>
<% end %>

<!-- DIGIPROV (events) -->
<% digiprov_events.each do |event| %>
  <%= md_section event, :type => 'digiprovMD',  :id => next_id(:digiprov, id) %>
<% end %>

<!-- DIGIPROV (agents) -->
<% digiprov_agents.each do |agent| %>
  <%= md_section agent, :type => 'digiprovMD', :id => next_id(:digiprov, id) %>
<% end %>
</amdSec>


<!-- DATA FILE AMD -->
<amdSec>

<!-- TECH -->
<% datafiles.each do |df| %>
  <%= md_section df.file_object, :type => 'techMD', :id => next_id(:tech, df.id) %>

  <% df.bitstream_objects.each do |bs| %>
    <%= md_section bs, :type => 'techMD', :id => next_id(:tech, df.id) %>
  <% end %>

<% end %>

<!-- DIGIPROV (events) -->
<% datafiles.each do |df| %>
  <% df.digiprov_events.each do |event| %>
    <%= md_section event, :type => 'digiprovMD',  :id => next_id(:digiprov, df.id) %>
  <% end %>
<% end %>

<!-- DIGIPROV (agents) -->
<% datafile_agents.each do |agent, dfs| %>
  <%= md_section agent, :type => 'digiprovMD', :id => next_id(:digiprov, dfs) %>
<% end %>

</amdSec>

<fileSec>
<fileGrp>
<% datafiles.each do |df| %>
  <%= file_element df %>
<% end %>
</fileGrp>
</fileSec>

<% rep_name_map.each do |name, rep| %>
  <%= representation_struct_map rep, :id => name, :admid => admids_for(name).join(' ') %>
<% end %>

</mets>
