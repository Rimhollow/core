%h1
  errors

%h2
  filter scope

%form{:action => "/errors", :method => "get"}
  %input{:type => 'hidden', :name => 'filter', :value => 'true'}
  %table
    %tr
      %th batch
      %th account
      %th project
      %th start date
      %th end date
      %th status
      %th error message
      %th set scope
    %tr
      %td
        %select{:name => 'batch-scope'}
          %option
          - Batch.all.each do |b|
            - if params["batch-scope"] == b.id
              %option{:selected => true}= b.id
            - else
              %option= b.id
      %td
        %select{:name => 'account-scope'}
          %option
          - Account.all.each do |a|
            - if params["account-scope"] == a.id
              %option{:selected => true}= a.id
            - else
              %option= a.id
      %td
        %select{:name => 'project-scope'}
          %option
          - Project.all.each do |p|
            - if params["project-scope"] == p.id + "-" + p.account.id
              %option{:selected => true} #{p.id}-#{p.account.id}
            - else
              %option #{p.id}-#{p.account.id}
      %td
        - if params['start_date']
          %input#start_date{:name => 'start_date', :value => params['start_date']}
        - else
          %input#start_date{:name => 'start_date'}

      %td
        - if params['end_date']
          %input{:name => 'end_date', :value => params['end_date']}
        - else
          %input{:name => 'end_date', :value => (Time.now + 60 * 60 * 24).strftime("%m/%d/%Y") }

      %td
        %select{:name => 'activity-scope'}
          %option
          %option error
          %option reset
          %option stashed
          - if params["activity-scope"]
            %option{:selected => true}= params['activity-scope']

      %td
        - if params['error-message']
          %input{:name => 'error-message', :value => params['error-message']}
        - else
          %input{:name => 'error-message'}

      %td
        %input{:type => 'submit', :value => 'Set Scope'}
%hr/

%h2
  results
- unless @packages.empty?
  = partial :package_stats, :locals => {:packages => @packages }
  #results
    %table
      %tr
        %th internal entity id (ieid) 
        %th package
        %th account
        %th project
        %th size (MB)
        %th # of datafiles
        %th status
        %th error date
        %th error message
      - @packages.each do |p|
        %tr
          %td
            %a{:href => "/package/#{p.id}"}= p.id
          %td
            %a{:href => "/package?search=#{p.sip.name}"}= p.sip.name 
          %td= p.project.account.id
          %td= p.project.id
          %td= sprintf('%.2f', p.sip.size_in_bytes.to_f / 1000000)
          %td= p.sip.number_of_datafiles
          - snafu_event = p.events.first(:order => [ :timestamp.desc ], :name.like => "% snafu")
          - latest_unsnafu_event = p.events.first(:order => [ :timestamp.desc ], :name.like => "%unsnafu") 
          - latest_stash_event = p.events.first(:order => [ :timestamp.desc ], :name => "stash") 

          %td
            - if latest_unsnafu_event and latest_unsnafu_event.timestamp >= snafu_event.timestamp
              reset
            - elsif latest_stash_event and latest_stash_event.timestamp >= snafu_event.timestamp
              stashed
            - else
              error
          %td= snafu_event.timestamp.strftime("%a %b %d %Y %I:%M:%S %p")
          %td
            - if snafu_event.notes
              %pre= snafu_event.notes[0, 100]
            - else
              &nbsp;

%h2 
  Save as Batch

%form{:action => '/batches', :method => 'post'}
  %input{:name => 'name', :value => "batch name"}
  %input{:type => 'hidden', :name => 'packages', :value => "#{@packages.inject(''){|str, p| str + " " + p.id}}"}
  %input{:type => 'submit', :value => 'Save as Batch'}

